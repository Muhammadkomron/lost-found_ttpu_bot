#!/bin/bash

set -o errexit
set -o pipefail
set -o nounset


if [ -z "${POSTGRES_USER}" ]; then
    base_postgres_image_default_user='postgres'
    export POSTGRES_USER="${base_postgres_image_default_user}"
fi
export DATABASE_URL="postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}"

postgres_ready() {
python << END
import sys

import psycopg2

try:
    psycopg2.connect(
        dbname="${POSTGRES_DB}",
        user="${POSTGRES_USER}",
        password="${POSTGRES_PASSWORD}",
        host="${POSTGRES_HOST}",
        port="${POSTGRES_PORT}",
    )
except psycopg2.OperationalError:
    sys.exit(-1)
sys.exit(0)

END
}

ngrok_ready() {
python << END
import requests
import os
import sys

TOKEN = os.environ["TELEGRAM_BOT_TOKEN"]

def get_ngrok_url_and_set_webhook() -> str:
    ngrok_tunnels = "http://ngrok:4551/api/tunnels"
    response = requests.get(ngrok_tunnels).json()
    tunnels = response["tunnels"]
    tunnel = tunnels[0]["public_url"] if "https://" in tunnels[0]["public_url"] else tunnels[1]["public_url"]
    set_webhook = f"""https://api.telegram.org/bot{TOKEN}/setWebhook?url={tunnel}/api/v1/"""
    webhook = requests.get(set_webhook).json()
    return tunnel


try:
    sys.stdout.write(get_ngrok_url_and_set_webhook())
except BaseException as e:
    sys.stdout.write(e)
    sys.exit(-1)
sys.exit(0)

END
}

until postgres_ready; do
  >&2 echo 'Waiting for PostgreSQL to become available...'
  sleep 1
done
>&2 echo 'PostgreSQL is available'

until ngrok_ready; do
  >&2 echo 'Waiting for Ngrok to become available...'
  sleep 1
done
>&2 echo ' Ngrok is available'
export "SERVER_DOMAIN=$(ngrok_ready)"

exec "$@"
